openapi: 3.0.0
info:
  title: Swarm API
  version: '1.0'
  description: Swarm API
  contact:
    name: Swarm Support
    email: support@swarmiolabs.com
servers:
  - url: 'https://api.gke-swarmprod.k8s.swarmiolabs.com'
paths:
  /api/v1/controller/authenticated/pipeline:
    post:
      summary: ''
      operationId: createPipeline
      responses:
        '201':
          description: Created
        '400':
          description: Bad Request
        '500':
          description: Internal Server Error
      description: Create a new pipeline.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/pipeline'
            examples:
              example pipeline:
                value:
                  name: My Pipeline
                  outputs:
                    - webhook-4951f476-f33a-4f33-bcbc-c3d7ce904225
                  steps:
                    - type: transform
                      fieldName: scorePlusTen
                      leftField: score
                      operator: +
                      constant: 10
                      required: true
                    - type: filter
                      statements:
                        scoreOverTen:
                          field: score
                          operator: '>'
                          value: 10
                      expression: scoreOverTen
                      outputs:
                        - email-88a44654-093b-48a8-8f19-90e08f3e62c5
                      required: true
          application/xml:
            schema:
              type: object
              properties: {}
        description: The pipeline definition.
      tags:
        - pipeline
  '/api/v1/controller/authenticated/pipeline/{pipelineName}':
    parameters:
      - schema:
          type: string
        name: pipelineName
        in: path
        description: The name of the pipeline to update
        required: true
    put:
      summary: ''
      operationId: updatePipeline
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
        '500':
          description: Internal Server Error
      description: Update an existing pipeline
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/pipeline'
            examples:
              example-pipeline:
                value:
                  name: My Pipeline
                  outputs:
                    - webhook-4951f476-f33a-4f33-bcbc-c3d7ce904225
                  steps:
                    - type: transform
                      fieldName: scorePlusTen
                      leftField: score
                      operator: +
                      constant: 10
                      required: true
                    - type: filter
                      statements:
                        scoreOverTen:
                          field: score
                          operator: '>'
                          value: 10
                      expression: scoreOverTen
                      outputs:
                        - email-88a44654-093b-48a8-8f19-90e08f3e62c5
                      required: true
        description: ''
      tags:
        - pipeline
    delete:
      summary: ''
      operationId: deletePipeline
      responses:
        '200':
          description: OK
      description: Delete a pipeline.
      tags:
        - pipeline
  /api/v1/controller/authenticated/webhook:
    post:
      summary: ''
      operationId: createWebhookAction
      responses:
        '201':
          description: Created
        '400':
          description: Bad Request
        '500':
          description: Internal Server Error
      description: Create a new webhook action.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhookAction'
            examples:
              example pipeline:
                value:
                  name: My Pipeline
                  outputs:
                    - webhook-4951f476-f33a-4f33-bcbc-c3d7ce904225
                  steps:
                    - type: transform
                      fieldName: scorePlusTen
                      leftField: score
                      operator: +
                      constant: 10
                      required: true
                    - type: filter
                      statements:
                        scoreOverTen:
                          field: score
                          operator: '>'
                          value: 10
                      expression: scoreOverTen
                      outputs:
                        - email-88a44654-093b-48a8-8f19-90e08f3e62c5
                      required: true
          application/xml:
            schema:
              type: object
              properties: {}
        description: The webhook action definition
      tags:
        - webhook action
  '/api/v1/controller/authenticated/webhook/{webhookActionName}':
    parameters:
      - schema:
          type: string
        name: webhookActionName
        in: path
        description: The name of the webhook action to update
        required: true
    put:
      summary: ''
      operationId: updateWebhookAction
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
        '500':
          description: Internal Server Error
      description: Update an existing webhook action.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhookAction'
            examples:
              example-pipeline:
                value:
                  name: My Pipeline
                  outputs:
                    - webhook-4951f476-f33a-4f33-bcbc-c3d7ce904225
                  steps:
                    - type: transform
                      fieldName: scorePlusTen
                      leftField: score
                      operator: +
                      constant: 10
                      required: true
                    - type: filter
                      statements:
                        scoreOverTen:
                          field: score
                          operator: '>'
                          value: 10
                      expression: scoreOverTen
                      outputs:
                        - email-88a44654-093b-48a8-8f19-90e08f3e62c5
                      required: true
        description: the webhook action definition.
      tags:
        - webhook action
    delete:
      summary: ''
      operationId: deleteWebhookAction
      responses:
        '200':
          description: OK
      description: Delete a webhook action.
      tags:
        - webhook action
  /api/v1/controller/authenticated/sms:
    post:
      summary: ''
      operationId: createSmsAction
      responses:
        '201':
          description: Created
        '400':
          description: Bad Request
        '500':
          description: Internal Server Error
      description: Create a new sms action.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/smsAction'
            examples:
              example pipeline:
                value:
                  name: My Pipeline
                  outputs:
                    - webhook-4951f476-f33a-4f33-bcbc-c3d7ce904225
                  steps:
                    - type: transform
                      fieldName: scorePlusTen
                      leftField: score
                      operator: +
                      constant: 10
                      required: true
                    - type: filter
                      statements:
                        scoreOverTen:
                          field: score
                          operator: '>'
                          value: 10
                      expression: scoreOverTen
                      outputs:
                        - email-88a44654-093b-48a8-8f19-90e08f3e62c5
                      required: true
          application/xml:
            schema:
              type: object
              properties: {}
        description: The sms action definition
      tags:
        - sms action
  '/api/v1/controller/authenticated/sms/{smsActionName}':
    parameters:
      - schema:
          type: string
        name: smsActionName
        in: path
        description: The name of the webhook action to update
        required: true
    put:
      summary: ''
      operationId: updateSmsAction
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
        '500':
          description: Internal Server Error
      description: Update an existing sms action.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/smsAction'
            examples:
              example-pipeline:
                value:
                  name: My Pipeline
                  outputs:
                    - webhook-4951f476-f33a-4f33-bcbc-c3d7ce904225
                  steps:
                    - type: transform
                      fieldName: scorePlusTen
                      leftField: score
                      operator: +
                      constant: 10
                      required: true
                    - type: filter
                      statements:
                        scoreOverTen:
                          field: score
                          operator: '>'
                          value: 10
                      expression: scoreOverTen
                      outputs:
                        - email-88a44654-093b-48a8-8f19-90e08f3e62c5
                      required: true
        description: The sms action definition.
      tags:
        - sms action
    delete:
      summary: ''
      operationId: deleteSmsAction
      responses:
        '200':
          description: OK
      description: Delete an sms action.
      tags:
        - sms action
  /api/v1/controller/authenticated/email:
    post:
      summary: ''
      operationId: createEmailAction
      responses:
        '201':
          description: Created
        '400':
          description: Bad Request
        '500':
          description: Internal Server Error
      description: Create a new email action.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/emailAction'
            examples:
              example pipeline:
                value:
                  name: My Pipeline
                  outputs:
                    - webhook-4951f476-f33a-4f33-bcbc-c3d7ce904225
                  steps:
                    - type: transform
                      fieldName: scorePlusTen
                      leftField: score
                      operator: +
                      constant: 10
                      required: true
                    - type: filter
                      statements:
                        scoreOverTen:
                          field: score
                          operator: '>'
                          value: 10
                      expression: scoreOverTen
                      outputs:
                        - email-88a44654-093b-48a8-8f19-90e08f3e62c5
                      required: true
          application/xml:
            schema:
              type: object
              properties: {}
        description: The email action definition
      tags:
        - email action
  '/api/v1/controller/authenticated/email/{emailActionName}':
    parameters:
      - schema:
          type: string
        name: emailActionName
        in: path
        description: The name of the webhook action to update
        required: true
    put:
      summary: ''
      operationId: updateEmailAction
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
        '500':
          description: Internal Server Error
      description: Update an existing email action.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/emailAction'
            examples:
              example-pipeline:
                value:
                  name: My Pipeline
                  outputs:
                    - webhook-4951f476-f33a-4f33-bcbc-c3d7ce904225
                  steps:
                    - type: transform
                      fieldName: scorePlusTen
                      leftField: score
                      operator: +
                      constant: 10
                      required: true
                    - type: filter
                      statements:
                        scoreOverTen:
                          field: score
                          operator: '>'
                          value: 10
                      expression: scoreOverTen
                      outputs:
                        - email-88a44654-093b-48a8-8f19-90e08f3e62c5
                      required: true
        description: The email action definition.
      tags:
        - email action
    delete:
      summary: ''
      operationId: deleteEmailAction
      responses:
        '200':
          description: OK
      description: Delete an email action.
      tags:
        - email action
components:
  schemas:
    pipeline:
      title: pipeline
      type: object
      x-examples:
        example-pipeline:
          name: My Pipeline
          outputs:
            - webhook-4951f476-f33a-4f33-bcbc-c3d7ce904225
          steps:
            - type: transform
              fieldName: scorePlusTen
              leftField: score
              operator: +
              constant: 10
              required: true
            - type: filter
              statements:
                scoreOverTen:
                  field: score
                  operator: '>'
                  value: 10
              expression: scoreOverTen
              outputs:
                - email-88a44654-093b-48a8-8f19-90e08f3e62c5
              required: true
      properties:
        name:
          type: string
        outputs:
          type: array
          items:
            type: string
        steps:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/filterstep'
              - $ref: '#/components/schemas/transformStep'
      required:
        - name
        - outputs
        - steps
      description: |-
        A pipeline is what processes json objects sent to the swarm api and may be used for fanout, transformations, and filtering. A pipeline has 0 or more steps, which may be either a transformation step, or a filter step. Step ordering is respected when a pipeline is being evaluated, and every step is evaluated for each message. A pipeline must always have at least one configured output, either on the pipeline itself, or on one of the steps. Step outputs are isolated from the pipeline output, that means that if a step is considered successful then the message will be sent to the outputs listed for that step. Each step has a boolean field "required" that indicates that step must pass in order for the pipeline outputs to be triggered. This is useful for successive filters and transformations on messages.

        What are filter steps?

        Filter steps are used to filter messages using logical operators. A filter step is composed of one or more statements. Each statement has a field, an operator, and a value. Any valid json type can be compared as long as the value type and the type on the field in the message are the same. Filter steps are defined as an object where the key is the step's name, and the key is used in expressions.

        What operators are supported in filter step statements?

        You may use > < >= <= == != as operators in statements.

        What is a filter step expression?

        Expressions are how you compose statements using logic operators. For example you could create three statements named "one" "two" and "three" and compose them together any way you like such as "one OR (two and three)" or "one XOR two AND three"

        What logic operators are supported in expressions?

        You may use and xand nand or xor nor in expressions.

        Can I use parenthesis in expressions?
        Yes, you can combine parenthesis with operators to form very complex expressions.

        What are transform steps?

        Transform steps are used to transform messages and currently only support  numerical field values and transformations. Transform steps are composed of fieldName, which is the resulting fieldName for the transformation, leftField which is the source field, operator, and either constant or rightField. If you want to transform using a constant value use the constant field. If you want to transform using another field in the message, use the rightField field.

        What operators are supported in transform steps?

        You may use - + / * operators in transform steps.
    filterstep:
      title: filterstep
      type: object
      properties:
        type:
          type: string
        statements:
          type: object
          properties:
            statementName:
              $ref: '#/components/schemas/filterStatement'
        expression:
          type: string
        outputs:
          type: array
          items:
            type: string
        required:
          type: boolean
      required:
        - type
        - statements
        - expression
        - outputs
        - required
    filterStatement:
      title: filterStatement
      type: object
      properties:
        field:
          type: string
        operator:
          type: string
        value:
          type:
            - string
            - number
            - boolean
      required:
        - field
        - operator
        - value
    transformStep:
      title: transformStep
      type: object
      properties:
        type:
          type: string
        fieldName:
          type: string
        leftField:
          type: string
        operator:
          type: string
        rightField:
          type: string
        constant:
          type: number
        outputs:
          type: array
          items:
            type: string
        required:
          type: boolean
      required:
        - type
        - fieldName
        - leftField
        - operator
        - outputs
        - required
    webhookAction:
      title: webhookAction
      type: object
      properties:
        name:
          type: string
        url:
          type: string
        method:
          type: string
        headers:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
              value:
                type: string
        maxConcurrentRequests:
          type: string
        verifyTlsCertificate:
          type: string
        successCodes:
          type: array
          items:
            type: integer
      x-examples:
        example-webhook-action:
          name: My webhook action
          url: 'https://my.domain.com?id=12345'
          method: POST
          headers:
            - name: authorization
              value: Basic YWRtaW46YWRtaW4=
          maxConcurrentRequests: 25
          verifyTlsCertificate: true
          successCodes:
            - 200
            - 201
            - 202
    smsAction:
      title: smsAction
      type: object
      properties:
        name:
          type: string
        phoneNumber:
          type: string
        messageBody:
          type: string
      required:
        - name
        - phoneNumber
        - messageBody
      x-examples:
        example-sms-action:
          name: My sms action
          phoneNumber: '+18011234567'
          messageBody: 'Item with id {{itemId}} has been processed.'
    emailAction:
      title: emailAction
      type: object
      x-examples:
        example-email-action:
          name: My email action
          to:
            - address1@example.com
            - address2@example.com
          subject: 'ID {{itemId}} has completed processing'
          body: '<!DOCTYPE html><html xmlns="http://www.w3.org/1999/xhtml" lang="ang"> <head> <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/> <title>Demystifying Email Design</title> <meta name="viewport" content="width=device-width, initial-scale=1.0"/></head><body><h1>ID{{itemId}}has completed processing</h1><p>Result:{{statusCode}}</p></body></html>'
          isHtml: true
      properties:
        name:
          type: string
        to:
          type: array
          items:
            type: string
        subject:
          type: string
        body:
          type: string
        isHtml:
          type: boolean
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-KEY
tags:
  - name: pipeline
  - name: webhook action
  - name: sms action
  - name: email action
